/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */,
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _SoundCloudPlayer = __webpack_require__(3);

var _SoundCloudPlayer2 = _interopRequireDefault(_SoundCloudPlayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

$(document).ready(function () {

  // Initialize SoundCloud if found
  var $globalPlayer = $('.global-player');
  if ($globalPlayer.length) {
    new _SoundCloudPlayer2.default($globalPlayer);
  }

  var $dialog = $('.download-dialog'),
      $downloadButton = $dialog.find('.btn-download');
  $dialog.find('.dismiss-dialog').click(function (e) {
    e.preventDefault();
    $dialog.fadeOut();
  });
  $('.toggle-dl-dialog').click(function (e) {
    e.preventDefault();
    var downloadUrl = e.currentTarget.dataset.url;
    if (downloadUrl) {
      $downloadButton.attr('href', downloadUrl);
      $dialog.fadeIn();
    }
  });

  if ($('body').hasClass('mobile') === false) {
    var $profileHeaderTitle = $('.profile-header .page-title'),
        $profileHeaderContent = $('.profile-header .profile-header-content'),
        $videoContainer = $('.profile-header .video-container'),
        $videoPortraitButtons = $('.video-portrait-buttons'),
        $playVideoButton = $('.play-video'),
        $youtubeVideo = $('.youtube-video'),
        $dismissVideoButton = $('.dismiss-video');

    if ($profileHeaderTitle.length) {
      var toggleProfileHeader = function toggleProfileHeader() {
        $profileHeaderTitle.toggleClass('small');
      };

      setTimeout(function () {
        toggleProfileHeader();
        $profileHeaderContent.find('.image-container, .title-container').on('click', toggleProfileHeader);
        setTimeout(function () {
          if ($videoContainer.length) {
            $videoContainer.fadeIn();
            $videoPortraitButtons.fadeIn();
          }
        }, 1000);
      }, 2200);

      if ($youtubeVideo.length) {
        var loaded = false;
        var player = false;
        $playVideoButton.click(function (e) {
          e.preventDefault();
          if (loaded === false || !player) {
            loaded = true;

            var tag = document.createElement('script');

            tag.src = 'https://www.youtube.com/iframe_api';
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

            window.onYouTubeIframeAPIReady = function () {
              player = new YT.Player('youtube-video', {
                height: window.height,
                width: window.width,
                videoId: $youtubeVideo.data('id'),
                playerVars: {
                  controls: 0,
                  showinfo: 0
                },
                events: {
                  'onReady': function onReady(event) {
                    $youtubeVideo.fadeIn();
                    event.target.playVideo();
                  },
                  'onStateChange': function onStateChange(event) {
                    if (event.data === YT.PlayerState.ENDED) {
                      $youtubeVideo.fadeOut();
                    }
                  }
                }
              });
            };
            $dismissVideoButton.click(function (e) {
              e.preventDefault();
              player.pauseVideo();
              $youtubeVideo.fadeOut();
            });
          } else {
            $youtubeVideo.fadeIn();
            player.playVideo();
          }
        });
      }
    }
  }
});

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by Barthy on 27.06.17.
 */

var SoundCloudPlayer = function () {
  _createClass(SoundCloudPlayer, [{
    key: '$nowPlayingProgress',
    get: function get() {
      return this._$nowPlayingProgress;
    },
    set: function set(value) {
      this._$nowPlayingProgress = value;
    }
  }, {
    key: '$nowPlayingSong',
    get: function get() {
      return this._$nowPlayingSong;
    },
    set: function set(value) {
      this._$nowPlayingSong = value;
    }
  }, {
    key: '$nowPlayingAlbum',
    get: function get() {
      return this._$nowPlayingAlbum;
    },
    set: function set(value) {
      this._$nowPlayingAlbum = value;
    }
  }, {
    key: '$nowPlayingLength',
    get: function get() {
      return this._$nowPlayingLength;
    },
    set: function set(value) {
      this._$nowPlayingLength = value;
    }
  }, {
    key: '$nowPlayingElapsed',
    get: function get() {
      return this._$nowPlayingElapsed;
    },
    set: function set(value) {
      this._$nowPlayingElapsed = value;
    }
  }, {
    key: '$btnBackward',
    get: function get() {
      return this._$btnBackward;
    },
    set: function set(value) {
      this._$btnBackward = value;
    }
  }, {
    key: '$btnForward',
    get: function get() {
      return this._$btnForward;
    },
    set: function set(value) {
      this._$btnForward = value;
    }
  }, {
    key: '$btnPause',
    get: function get() {
      return this._$btnPause;
    },
    set: function set(value) {
      this._$btnPause = value;
    }
  }, {
    key: '$btnPlay',
    get: function get() {
      return this._$btnPlay;
    },
    set: function set(value) {
      this._$btnPlay = value;
    }
  }]);

  function SoundCloudPlayer($container) {
    var _this = this;

    _classCallCheck(this, SoundCloudPlayer);

    this.players = [];

    this.$btnPlay = $container.find('.player-control.play');
    this.$btnPause = $container.find('.player-control.pause');
    this.$btnForward = $container.find('.player-control.forward');
    this.$btnBackward = $container.find('.player-control.backward');
    this.$nowPlayingElapsed = $container.find('.now-playing-elapsed');
    this.$nowPlayingLength = $container.find('.now-playing-length');
    this.$nowPlayingAlbum = $container.find('.now-playing-album');
    this.$nowPlayingSong = $container.find('.now-playing-song');
    this.$nowPlayingProgress = $container.find('.progress-bar');

    this.currentPlayer = 0;
    this.currentSong = 0;

    var $embeds = $('.album-embed');
    $embeds.each(function (embedIndex) {
      var player = new SoundCloudAudio('3f0c2df99a948f8142621535b3b4ba73');
      _this.players.push(player);

      var $embedElement = $embeds.eq(embedIndex);
      var secondaryColor = $embedElement.data('color-secondary');

      $embedElement.data('player-nr', embedIndex);
      player.resolve($embedElement.attr('data-sc'), function (playlist) {
        var tracks = playlist.tracks,
            $list = $embedElement.find('.list-group');

        var _loop = function _loop(i) {
          var $listItem = $('<li class="list-group-item">' + '<span style="color: ' + secondaryColor + '" class="track-number">' + (i < 9 ? '0' + (i + 1) : i + 1) + '</span>' + '<span class="title">' + tracks[i].title + '</span>' + '<span style="color: ' + secondaryColor + '" class="track-duration">' + SoundCloudPlayer.formatTime(tracks[i].duration, true) + '</span>' + '</li>');

          $list.append($listItem);
          $listItem.on('click', function () {
            _this.play(embedIndex, i);
          });
        };

        for (var i = 0; i < tracks.length; i++) {
          _loop(i);
        }

        // render timer on every second
        player.on('timeupdate', function () {
          var time = SoundCloudPlayer.formatTime(new Date(player.audio.currentTime), false);
          _this.$nowPlayingElapsed.text(time);
          var percent = 100 * Math.floor(player.audio.currentTime) / Math.floor(player.audio.duration);
          _this.$nowPlayingProgress.attr('aria-valuenow', percent);
          _this.$nowPlayingProgress.width(percent + '%');
        });

        player.on('ended', function () {
          var next = _this.currentSong + 1;
          if (next < tracks.length) {
            _this.play(embedIndex, next);
          }
        });

        if (embedIndex === 0) {
          _this.updatePlayer();
        }
      });
    });

    this.$btnPlay.on('click', function () {
      _this.play(_this.currentPlayer, _this.currentSong);
    });

    this.$btnPause.on('click', function () {
      _this.pause(_this.currentPlayer, _this.currentSong);
    });

    this.$btnForward.on('click', function () {
      if (_this.currentSong + 1 < _this.players[_this.currentPlayer]._playlist.tracks.length) {
        _this.play(_this.currentPlayer, _this.currentSong + 1);
      }
    });

    this.$btnBackward.on('click', function () {
      if (_this.currentSong - 1 >= 0) {
        _this.play(_this.currentPlayer, _this.currentSong - 1);
      }
    });
  }

  _createClass(SoundCloudPlayer, [{
    key: 'play',
    value: function play(playerIndex, songIndex) {
      var _this2 = this;

      if (this.currentPlayer !== playerIndex) {
        this.players[this.currentPlayer].pause({
          playlistIndex: this.currentSong
        });
        this.players[playerIndex].play({
          playlistIndex: songIndex
        });
      }

      if (!this.players[playerIndex].playing) {
        this.$btnPlay.fadeToggle(200, 'linear', function () {
          _this2.$btnPause.fadeToggle(200);
        });
      }
      if (this.players[playerIndex]._playlistIndex !== songIndex) {
        this.players[playerIndex].play({
          playlistIndex: songIndex
        });
      }

      this.currentPlayer = playerIndex;
      this.currentSong = songIndex;

      this.updatePlayer();
    }
  }, {
    key: 'pause',
    value: function pause(playerIndex, songIndex) {
      var _this3 = this;

      if (this.players[playerIndex].playing) {
        this.$btnPause.fadeToggle(200, 'linear', function () {
          _this3.$btnPlay.fadeToggle(200);
        });
        this.players[playerIndex].pause({
          playlistIndex: songIndex
        });
      }
    }
  }, {
    key: 'updatePlayer',
    value: function updatePlayer() {
      if (this.$nowPlayingElapsed.text().length === 0) {
        this.$nowPlayingElapsed.text('00:00');
      }
      this.$nowPlayingLength.text(SoundCloudPlayer.formatTime(this.players[this.currentPlayer]._playlist.tracks[this.currentSong].duration, true));
      this.$nowPlayingAlbum.text(this.players[this.currentPlayer]._playlist.title);
      this.$nowPlayingSong.text(this.players[this.currentPlayer]._playlist.tracks[this.currentSong].title);
    }
  }], [{
    key: 'formatTime',
    value: function formatTime(time, milli) {
      if (milli) time = time / 1000;
      var hours = Math.floor(time / 3600);
      var mins = '0' + Math.floor(time % 3600 / 60);
      var secs = '0' + Math.floor(time % 60);

      mins = mins.substr(mins.length - 2);
      secs = secs.substr(secs.length - 2);

      if (!isNaN(parseInt(secs))) {
        if (hours) {
          return hours + ':' + mins + ':' + secs;
        } else {
          return mins + ':' + secs;
        }
      } else {
        return '00:00';
      }
    }
  }, {
    key: 'swapWith',
    value: function swapWith($this, $that) {
      // create temporary placeholder
      var $temp = $('<div>');

      // 3-step swap
      $this.before($temp);
      $that.before($this);
      $temp.after($that).remove();
    }
  }]);

  return SoundCloudPlayer;
}();

exports.default = SoundCloudPlayer;

/***/ })
/******/ ]);