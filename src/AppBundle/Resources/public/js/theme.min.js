/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(1);

var _GenreFilter = __webpack_require__(2);

var _GenreFilter2 = _interopRequireDefault(_GenreFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

$(document).ready(function () {

  var $artistPreviews = $('.artist-col');
  if ($artistPreviews.length) {
    new _GenreFilter2.default($artistPreviews);
  }

  $('a[href^="#"]').on('click', function (e) {
    e.preventDefault();

    var url = new URL($(e.currentTarget).attr('href'));
    if (url.search.length === 0) {
      var selector = url.hash.length === 0 ? 'header' : url.hash;

      $('html, body').animate({
        scrollTop: $(selector).offset().top - 50
      }, 300, function () {
        window.location.hash = url.hash;
      });
    } else {
      window.location.hash = url.hash;
    }
  });

  window.sr = ScrollReveal({ mobile: false, reset: false });
  var preserve = function preserve(e) {
    var $e = $(e);
    if ($e.hasClass('sr-preserve')) {
      $e.addClass('sr-done');
      $e.removeAttr('style');
    }
  };

  sr.reveal('.sr-t-1', {
    duration: 1000,
    delay: 200,
    origin: 'top',
    afterReveal: preserve
  });
  sr.reveal('.sr-t-2', {
    duration: 1000,
    delay: 400,
    origin: 'top',
    afterReveal: preserve
  });
  sr.reveal('.sr-t-3', {
    duration: 1000,
    delay: 600,
    origin: 'top',
    afterReveal: preserve
  });
  sr.reveal('.sr-b-1', {
    duration: 1000,
    delay: 200,
    origin: 'bottom',
    afterReveal: preserve
  });
  sr.reveal('.sr-b-2', {
    duration: 1000,
    delay: 400,
    origin: 'bottom',
    afterReveal: preserve
  });
  sr.reveal('.sr-b-3', {
    duration: 1000,
    delay: 600,
    origin: 'bottom',
    afterReveal: preserve
  });
});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GenreFilter = function () {
  _createClass(GenreFilter, [{
    key: 'filterProfiles',
    value: function filterProfiles(e) {
      e.preventDefault();
      console.info('click genre thing');

      var genre = e.currentTarget.dataset.genre;
      this.$genreLinks.filter('.active').removeClass('active');
      if (genre.length) {
        var genreSelector = '[data-genre!=' + genre + ']';

        var $profilesToHide = this.$artistPreviews.filter(genreSelector);
        if ($profilesToHide.length) {
          $profilesToHide.fadeOut().addClass('hidden');
        }

        var $profilesToUnhide = this.$artistPreviews.filter('.hidden').not(genreSelector);
        if ($profilesToUnhide.length) {
          setTimeout(function () {
            $profilesToUnhide.removeClass('hidden').fadeIn();
          }, 400);
        }

        this.$genreLinks.not(genreSelector).addClass('active');
      } else {
        this.$artistPreviews.filter('.hidden').removeClass('hidden').fadeIn();
        this.$genreLinks.filter('[data-genre=""]').addClass('active');
      }
    }
  }, {
    key: '$genreLinks',
    get: function get() {
      return this._$genreLinks;
    },
    set: function set(value) {
      this._$genreLinks = value;
    }
  }, {
    key: '$artistPreviews',
    get: function get() {
      return this._$artistPrevies;
    },
    set: function set(value) {
      this._$artistPrevies = value;
    }
  }]);

  function GenreFilter($artistPreviews) {
    _classCallCheck(this, GenreFilter);

    this.$artistPreviews = $artistPreviews;
    this.$genreLinks = $('.artists .genre-link');
    this.$genreLinks.on('click', this.filterProfiles.bind(this));

    var queryParams = new URLSearchParams(window.location.search);
    if (queryParams.has('genre')) {
      var genre = queryParams.get('genre');
      this.$genreLinks.filter('[data-genre="' + genre + '"]').click();
    }
  }

  return GenreFilter;
}();

exports.default = GenreFilter;

/***/ })
/******/ ]);